Code Generation for Control Stmts
    stmt -> if-stmt | while-stmt | break | other
    if-stmt -> if ( exp ) stmt | if ( exp ) stmt else stmt
    while-stmt -> while ( exp ) stmt
    exp -> true | false

if_false true goto L1       e.g., if ( true ) while ( true ) if ( false ) break else other

label L2
                                               if
if_false true goto L3

if_false false goto L4                                         while
goto L3                             true
goto L5
label L4
other                                               true                 if
label L5

goto L2
label L3
                                                           false       break   other
label L1                                                                               19
  Code Generation for Control Stmts
void genCode( Exp tree, String label ) {        // code fragment for WhileExp
  String codestr = “”;                          lab1 = genLabel();
  String lab1, lab2;                            codestr += “label” + lab1;
  if( tree != null ) {                          emitCode( codestr );
      if( tree instanceof IntExp ) {            genCode( tree.test, label );
        // do nothing                           lab2 = genLabel();
      } else if( tree instanceof IfExp ) {      if( tree.test .value == 0 )
        // refer to the related fragment            codestr += “if_false false goto ” + lab2;
      } else if( tree instanceof WhileExp ) {   else
        // refer to the related fragment           codestr += “if_false true goto ” + lab2;
      } else if( tree instanceof BreakExp ) {   emitCode( codestr );
        codestr += “goto “ + label;             genCode( tree.body, lab2 );
        emitCode( codestr );                    codestr += “goto ” + lab1;
      } else if( tree instanceof OtherExp ) {   emitCode( codestr );
          emitCode( “Other” );                  codestr += “label ” + lab2;
      } else                                    emitCode( codestr );
  }
}
                                                                                       20
  Code Generation for Control Stmts

// code fragment for IfExp
genCode( tree.test, label );
lab1 = genLabel();                              // continued from left
if( tree.test.value == 0 )                      codestr += “label ” + lab1;
    codestr += “if_false false goto ” + lab1;   emitCode( codestr );
else                                            if( tree.else != null ) {
    codestr += “if_false true goto ” + lab1;        genCode( tree.else, label );
emitCode( codestr );                                codestr += “label ” + lab2;
genCode( tree.then, label );                        emitCode( codestr );
if( tree.else != null ) {                       }
    lab2 = genLabel();
    codestr += “goto ” + lab2;
    emitCode( codestr );
}




                                                                                   21
    Function Definitions and Calls
§ Function definition: create a function name, parameters,
  the return type, and the code
§ Function call: create actual values for parameters
  (called arguments), perform a jump to the function
  code, and return to the caller
§ The runtime environment is not known at the definition
  time, but the general record structure is clear
   • The runtime environment is built by the calling sequence
     (partially by the caller and partially by the callee)
                                                                22
Intermediate Code for Functions
e.g., function definition:
                             e.g., function call:
int f( int x, int y ) {
                             x = f( 2 + 3, 4 );
   return x + y + 1;
}


                             Three-address code:
Three-address code:
                             begin_args
entry f
                             t1 = 2 + 3
t1 = x + y
                             arg t1
t2 = t1 + 1
                             arg 4
return t2
                             x = call f

                                                    23
      Code Generation for Functions
fn f(x) = 2 + x
fn g(x, y) = f(x) + y
g(3, 4)                          PrgK

entry f
                        FnK(f)               FnK(g)                        CallK(g)
t1 = 2 + x
return t1

entry g        ParamK(x) PlusK   ParamK(x)     ParamK(y)         PlusK     ConstK     ConstK
begin_args                                                                  (3)        (4)
arg x
t2 = call f
t3 = t2 + y       ConstK(2)      IdK(x)               CallK(f)           IdK(y)
return t3

begin_args
arg 3                                                            IdK(x)
arg 4
call g
                                                                                        24